{"version":3,"sources":["components/Task.js","components/NewTaskButton.js","components/NewTaskForm.js","App.js","index.js"],"names":["Task","props","_props$task","task","task_id","task_title","task_creation_dt","task_desc","task_completed","task_scheduled_dt","priority_desc","cleanedScheduledDt","substring","priorityColour","react_default","a","createElement","className","id","autoComplete","type","name","value","onChange","handleTaskUpdate","onBlur","putTaskUpdate","checked","placeholder","NewTaskButton","onClick","postNewTask","NewTaskForm","newTaskTitle","handleNewTaskChange","components_NewTaskButton","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","getAllTasks","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","fetch","sent","json","then","data","setState","isFetched","tasks","error","stop","_callee2","biggestTaskID","newTask","tasksCopy","_context2","state","abrupt","map","reduce","acc","val","JSON","parse","stringify","push","concat","method","bind","assertThisInitialized","e","updateValue","taskID","Number","target","parentNode","fieldToUpdate","updatedTaskState","taskCopy","updateTask","_this2","_this$state","components_Task","key","components_NewTaskForm","Component","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.b35b716b.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/Task.css\";\r\n\r\nfunction Task(props) {\r\n  const {task_id, task_creation_dt, task_title, task_desc, task_completed, task_scheduled_dt, priority_desc} = props.task;\r\n  const cleanedScheduledDt = task_scheduled_dt\r\n    ? task_scheduled_dt.substring(0, 10)\r\n    : \"\";\r\n  const priorityColour =\r\n    priority_desc === \"High\" ? \"task__priority--high\" : \"task__priority\";\r\n  \r\n  return (\r\n    <div className=\"task\">\r\n      <form id={task_id} autoComplete=\"off\">\r\n        <input\r\n          className=\"task__title\"\r\n          type=\"text\"\r\n          name=\"task_title\"\r\n          value={task_title}\r\n          onChange={props.handleTaskUpdate}\r\n          onBlur={props.putTaskUpdate}\r\n        />\r\n        <input\r\n          className=\"task__completed\"\r\n          type=\"checkbox\"\r\n          name=\"task_completed\"\r\n          checked={task_completed}\r\n          onChange={props.handleTaskUpdate}\r\n          onBlur={props.putTaskUpdate}\r\n        />\r\n        <input\r\n          className=\"task__desc\"\r\n          type=\"text\"\r\n          name=\"task_desc\"\r\n          placeholder=\"...\"\r\n          value={task_desc}\r\n          onChange={props.handleTaskUpdate}\r\n          onBlur={props.putTaskUpdate}\r\n        />\r\n        <input\r\n          className=\"task__scheduledDt\"\r\n          type=\"date\"\r\n          name=\"task_scheduled_dt\"\r\n          value={cleanedScheduledDt}\r\n          onChange={props.handleTaskUpdate}\r\n          onBlur={props.putTaskUpdate}\r\n        />\r\n        <select\r\n          className={priorityColour}\r\n          name=\"priority_desc\"\r\n          value={priority_desc}\r\n          onChange={props.handleTaskUpdate}\r\n          onBlur={props.putTaskUpdate}\r\n        >\r\n          <option>High</option>\r\n          <option>Medium</option>\r\n          <option>Low</option>\r\n        </select>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport \"../css/NewTaskButton.css\";\r\n\r\nconst NewTaskButton = props => {\r\n  return (\r\n    <button className=\"newTaskButton\" type=\"button\" onClick={props.postNewTask}>\r\n      Add Task\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default NewTaskButton;\r\n","import React from \"react\";\r\nimport NewTaskButton from \"./NewTaskButton\";\r\nimport \"../css/NewTaskForm.css\";\r\n\r\nconst NewTaskForm = props => {\r\n  return (\r\n    <div className=\"newTaskForm\">\r\n      <form>\r\n        <input\r\n          className=\"newTaskForm__titleInput\"\r\n          type=\"text\"\r\n          placeholder=\"Task Title\"\r\n          value={props.newTaskTitle}\r\n          onChange={props.handleNewTaskChange}\r\n        />\r\n        <NewTaskButton postNewTask={props.postNewTask} />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewTaskForm;\r\n","import React, { Component } from \"react\";\r\nimport Task from \"./components/Task\";\r\nimport NewTaskForm from \"./components/NewTaskForm\";\r\nimport \"./css/App.css\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      error: null,\r\n      isFetched: false,\r\n      tasks: [],\r\n      newTaskTitle: \"\"\r\n    };\r\n\r\n    this.getAllTasks = this.getAllTasks.bind(this);\r\n    this.putTaskUpdate = this.putTaskUpdate.bind(this);\r\n    this.handleTaskUpdate = this.handleTaskUpdate.bind(this);\r\n    this.handleNewTaskChange = this.handleNewTaskChange.bind(this);\r\n    this.postNewTask = this.postNewTask.bind(this);\r\n  }\r\n\r\n  getAllTasks = async () => {\r\n    const res = await fetch(\"/allTasks\");\r\n    await res.json().then(\r\n      data => {\r\n        this.setState({\r\n          isFetched: true,\r\n          tasks: data\r\n        });\r\n      },\r\n      error => {\r\n        this.setState({\r\n          error,\r\n          isFetched: true\r\n        });\r\n      }\r\n    );\r\n  };\r\n\r\n  putTaskUpdate(e) {\r\n    const taskID = Number(e.target.parentNode.id);\r\n    const fieldToUpdate = e.target.name;\r\n    let updateValue;\r\n\r\n    if (fieldToUpdate === \"task_title\" && updateValue === \"\") return;\r\n\r\n    updateValue =\r\n      fieldToUpdate === \"task_completed\"\r\n        ? e.target.checked\r\n          ? true\r\n          : false\r\n        : e.target.value;\r\n\r\n    fetch(`/amendTask/${taskID}/field/${fieldToUpdate}/value/${updateValue}`, {\r\n      method: \"PUT\"\r\n    });\r\n  }\r\n\r\n  postNewTask = async () => {\r\n    const newTaskTitle = this.state.newTaskTitle;\r\n\r\n    if (newTaskTitle === \"\") return;\r\n\r\n    const biggestTaskID = this.state.tasks.map(task => {\r\n      return task.task_id;\r\n    }).reduce((acc, val) => {\r\n      if (val > acc) {\r\n        return val;\r\n      } else {\r\n        return acc;\r\n      } \r\n    });\r\n    \r\n    const newTaskID = biggestTaskID + 1;\r\n\r\n    const newTask = {\r\n      \"task_id\": newTaskID,\r\n      \"task_creation_dt\": \"\", \r\n      \"task_title\": newTaskTitle, \r\n      \"task_desc\": \"\", \r\n      \"task_completed\": \"\", \r\n      \"task_scheduled_dt\": \"\", \r\n      \"priority_desc\": \"Low\",\r\n    };\r\n    \r\n    const tasksCopy = JSON.parse(JSON.stringify(this.state.tasks));\r\n    tasksCopy.push(newTask);\r\n    \r\n    this.setState({ tasks: tasksCopy });\r\n    this.setState({ newTaskTitle: \"\" });\r\n\r\n    // what if the addTask API call returned the updated tasks data? Could then use it to setState, triggering re-render\r\n\r\n    await fetch(`/addTask/${newTaskTitle}`, {\r\n      method: \"POST\"\r\n    });\r\n  };\r\n\r\n  handleTaskUpdate(e) {\r\n    const taskID = Number(e.target.parentNode.id);\r\n    const fieldToUpdate = e.target.name;\r\n    let updateValue;\r\n\r\n    updateValue =\r\n      fieldToUpdate === \"task_completed\"\r\n        ? e.target.checked\r\n          ? true\r\n          : false\r\n        : e.target.value;\r\n\r\n    const updatedTaskState = this.state.tasks.map(task => {\r\n      const updateTask = task => {\r\n        const taskCopy = JSON.parse(JSON.stringify(task));\r\n        taskCopy[fieldToUpdate] = updateValue;\r\n\r\n        return taskCopy;\r\n      };\r\n\r\n      if (task.task_id === taskID) {\r\n        return updateTask(task);\r\n      } else {\r\n        return task;\r\n      }\r\n    });\r\n\r\n    this.setState({ tasks: updatedTaskState });\r\n  }\r\n\r\n  handleNewTaskChange(e) {\r\n    const newTaskTitle = e.target.value;\r\n\r\n    this.setState({ newTaskTitle });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAllTasks();\r\n  }\r\n\r\n  render() {\r\n    const { error, isFetched } = this.state;\r\n    if (error) {\r\n      return (\r\n        <section>\r\n          <p>Sorry, something went wrong. Please try again.</p>\r\n        </section>\r\n      );\r\n    } else if (!isFetched) {\r\n      return (\r\n        <section>\r\n          <p>Your tasks are loading...</p>\r\n        </section>\r\n      );\r\n    } else {\r\n      const tasks = this.state.tasks.map(task => {\r\n        return (\r\n          <Task\r\n            key={task.task_id}\r\n            task={task}\r\n            handleTaskUpdate={this.handleTaskUpdate}\r\n            putTaskUpdate={this.putTaskUpdate}\r\n          />\r\n        );\r\n      });\r\n      return (\r\n        <section className=\"tasksContainer\">\r\n          {tasks}\r\n          <NewTaskForm\r\n            newTaskTitle={this.state.newTaskTitle}\r\n            handleNewTaskChange={this.handleNewTaskChange}\r\n            postNewTask={this.postNewTask}\r\n          />\r\n        </section>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./css/index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}