{"version":3,"sources":["components/DeleteTaskButton.js","components/Task.js","components/NewTaskButton.js","components/NewTaskForm.js","components/SortBy.js","utilityFunctions.js","App.js","index.js"],"names":["DeleteTaskButton","props","className","type","onClick","deleteTask","taskID","icon","faTrashAlt","Task","task","task_id","taskTitle","task_title","taskDesc","task_desc","taskCompleted","task_completed","taskScheduledDt","task_scheduled_dt","priorityDesc","priority_desc","cleanedScheduledDt","substring","priorityColour","id","autoComplete","name","value","onChange","handleTaskUpdate","onBlur","putTaskUpdate","checked","rows","cols","placeholder","NewTaskButton","postNewTask","NewTaskForm","newTaskTitle","handleNewTaskChange","SortBy","Component","constructor","super","this","state","selected","onButtonClick","bind","onSelectChange","refactorSelectValue","selectValue","orderByField","indexOf","trim","direction","e","newValue","target","setState","sortOrder","sortTasks","render","encodeUpdateValue","updateValue","replace","convertToNumber","string","Number","App","error","isFetched","tasks","taskOrder","getAllTasks","newTask","fetch","res","json","data","parentNode","fieldToUpdate","updatedTaskState","map","taskCopy","JSON","parse","stringify","updateTask","forEach","val","method","window","confirm","status","every","reorderedTasks","sort","a","b","firstVal","secondVal","task_creation_dt","componentDidMount","key","length","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.484c7039.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../css/DeleteTaskButton.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrashAlt } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst DeleteTaskButton = (props) => {\r\n  return (\r\n    <button\r\n      className=\"deleteTaskButton\"\r\n      type=\"button\"\r\n      onClick={() => props.deleteTask(props.taskID)}\r\n    >\r\n      <FontAwesomeIcon icon={faTrashAlt} />\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default DeleteTaskButton;\r\n","import React from \"react\";\r\nimport DeleteTaskButton from \"./DeleteTaskButton\";\r\nimport \"../css/Task.css\";\r\n\r\nconst Task = (props) => {\r\n  const {\r\n    task_id: taskID,\r\n    task_title: taskTitle,\r\n    task_desc: taskDesc,\r\n    task_completed: taskCompleted,\r\n    task_scheduled_dt: taskScheduledDt,\r\n    priority_desc: priorityDesc,\r\n  } = props.task;\r\n  const cleanedScheduledDt = taskScheduledDt\r\n    ? taskScheduledDt.substring(0, 10)\r\n    : \"\";\r\n  const priorityColour =\r\n    priorityDesc === \"High\" ? \"task__priority--high\" : \"task__priority\";\r\n  return (\r\n    <div className=\"task\">\r\n      <form id={taskID} autoComplete=\"off\">\r\n        <input\r\n          className=\"task__title\"\r\n          type=\"text\"\r\n          name=\"task_title\"\r\n          value={taskTitle}\r\n          onChange={props.handleTaskUpdate}\r\n          onBlur={props.putTaskUpdate}\r\n        />\r\n        <input\r\n          className=\"task__completed\"\r\n          type=\"checkbox\"\r\n          name=\"task_completed\"\r\n          checked={taskCompleted}\r\n          onChange={props.handleTaskUpdate}\r\n          onBlur={props.putTaskUpdate}\r\n        />\r\n        <textarea\r\n          className=\"task__desc\"\r\n          type=\"text\"\r\n          name=\"task_desc\"\r\n          rows=\"3\"\r\n          cols=\"20\"\r\n          placeholder=\"...\"\r\n          value={taskDesc}\r\n          onChange={props.handleTaskUpdate}\r\n          onBlur={props.putTaskUpdate}\r\n        />\r\n        <input\r\n          className=\"task__scheduledDt\"\r\n          type=\"date\"\r\n          name=\"task_scheduled_dt\"\r\n          value={cleanedScheduledDt}\r\n          onChange={props.handleTaskUpdate}\r\n          onBlur={props.putTaskUpdate}\r\n        />\r\n        <select\r\n          className={priorityColour}\r\n          name=\"priority_desc\"\r\n          value={priorityDesc}\r\n          onChange={props.handleTaskUpdate}\r\n          onBlur={props.putTaskUpdate}\r\n        >\r\n          <option>High</option>\r\n          <option>Medium</option>\r\n          <option>Low</option>\r\n        </select>\r\n        <DeleteTaskButton deleteTask={props.deleteTask} taskID={taskID} />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport \"../css/NewTaskButton.css\";\r\n\r\nconst NewTaskButton = (props) => {\r\n  return (\r\n    <button className=\"newTaskButton\" type=\"button\" onClick={props.postNewTask}>\r\n      Add Task\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default NewTaskButton;\r\n","import React from \"react\";\r\nimport NewTaskButton from \"./NewTaskButton\";\r\nimport \"../css/NewTaskForm.css\";\r\n\r\nconst NewTaskForm = (props) => {\r\n  return (\r\n    <div className=\"newTaskForm\">\r\n      <form>\r\n        <input\r\n          className=\"newTaskForm__titleInput\"\r\n          type=\"text\"\r\n          placeholder=\"Task Title\"\r\n          value={props.newTaskTitle}\r\n          onChange={props.handleNewTaskChange}\r\n        />\r\n        <NewTaskButton postNewTask={props.postNewTask} />\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NewTaskForm;\r\n","import React, { Component } from \"react\";\r\nimport \"../css/SortBy.css\";\r\n\r\n// sort function should be declared in App module & passed as prop? or Declared in SortBy? - I think former because it'll amend (by reordering) App state\r\n// If function is declared in SortBy, can it change state in App?\r\n\r\n// ############## done\r\n\r\n// when scheduled date is added or removed, and then user attempts to sort immediately after,\r\n// the change doesn't seem to be picked up\r\n// - if it's the same select value, onSelectChange won't fire\r\n// ### added sort button to fix this, just needs styling\r\n\r\n// - if it's not the same value, it's because the date is missing trailing zeros (due to state being updated locally & not from the db)\r\n// ### should be fixed now\r\n\r\n// how should nulls be ordered among themselves when there're both null & non-null values?\r\n// ### they should now be in task creation date descending order as a default\r\n\r\n// when adding a new task or deleted a task, sort auto reverts to Created Date (Desc)\r\n// ### should be fixed now\r\n\r\n// ############### to do\r\n\r\n// finish styling button\r\n\r\nclass SortBy extends Component {\r\n  constructor(props) {\r\n    super();\r\n\r\n    this.state = {\r\n      selected: \"Created Date (Descending)\",\r\n    };\r\n\r\n    this.onButtonClick = this.onButtonClick.bind(this);\r\n    this.onSelectChange = this.onSelectChange.bind(this);\r\n    this.refactorSelectValue = this.refactorSelectValue.bind(this);\r\n  }\r\n\r\n  refactorSelectValue(selectValue) {\r\n    const lookup = {\r\n      \"Created Date\": \"task_creation_dt\",\r\n      \"Scheduled Date\": \"task_scheduled_dt\",\r\n    };\r\n\r\n    const orderByField = selectValue\r\n      .substring(0, selectValue.indexOf(\"(\"))\r\n      .trim();\r\n\r\n    const direction = selectValue.substring(\r\n      selectValue.indexOf(\"(\") + 1,\r\n      selectValue.indexOf(\")\")\r\n    );\r\n\r\n    return {\r\n      orderByField: lookup[orderByField],\r\n      direction,\r\n    };\r\n  }\r\n\r\n  onSelectChange(e) {\r\n    const newValue = e.target.value;\r\n\r\n    this.setState({ selected: newValue });\r\n  }\r\n\r\n  onButtonClick() {\r\n    const sortOrder = this.state.selected;\r\n\r\n    this.props.sortTasks(this.refactorSelectValue(sortOrder));\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"sortBy\">\r\n        <label className=\"sortBy__label\">\r\n          Sort By:\r\n          <select\r\n            className=\"sortBy__dropdown\"\r\n            value={this.state.selected}\r\n            onChange={this.onSelectChange}\r\n          >\r\n            <option>Created Date (Descending)</option>\r\n            <option>Created Date (Ascending)</option>\r\n            <option>Scheduled Date (Descending)</option>\r\n            <option>Scheduled Date (Ascending)</option>\r\n          </select>\r\n        </label>\r\n        <button className=\"sortBy__button\" onClick={this.onButtonClick}>\r\n          Sort\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SortBy;\r\n","const encodeUpdateValue = (updateValue) => {\r\n  const encodedStr = updateValue\r\n    .replace(/%/g, \"%25\")\r\n    .replace(/[\\n]/g, \"%0A\")\r\n    .replace(/\\//g, \"%2f\")\r\n    .replace(/\\\\/g, \"%5C\")\r\n    .replace(/\\?/g, \"%3f\")\r\n    .replace(/'/g, \"''\")\r\n    .replace(/#/g, \"%23\");\r\n\r\n  return encodedStr;\r\n};\r\n\r\nconst convertToNumber = (string) => {\r\n  if (string === null) return null;\r\n\r\n  const convertedNum = Number(string.replace(/[^0-9]/g, \"\"));\r\n\r\n  return convertedNum;\r\n};\r\n\r\nexport { encodeUpdateValue, convertToNumber };\r\n","import React, { Component } from \"react\";\r\nimport Task from \"./components/Task\";\r\nimport NewTaskForm from \"./components/NewTaskForm\";\r\nimport SortBy from \"./components/SortBy\";\r\nimport \"./css/App.css\";\r\nimport { encodeUpdateValue, convertToNumber } from \"./utilityFunctions\";\r\n\r\nclass App extends Component {\r\n  constructor(props) {\r\n    super();\r\n    this.state = {\r\n      error: null,\r\n      isFetched: false,\r\n      tasks: [],\r\n      taskOrder: {\r\n        orderByField: \"task_creation_dt\",\r\n        direction: \"Descending\",\r\n      },\r\n      newTaskTitle: \"\",\r\n    };\r\n\r\n    this.getAllTasks = this.getAllTasks.bind(this);\r\n    this.putTaskUpdate = this.putTaskUpdate.bind(this);\r\n    this.handleTaskUpdate = this.handleTaskUpdate.bind(this);\r\n    this.handleNewTaskChange = this.handleNewTaskChange.bind(this);\r\n    this.postNewTask = this.postNewTask.bind(this);\r\n    this.deleteTask = this.deleteTask.bind(this);\r\n    this.sortTasks = this.sortTasks.bind(this);\r\n  }\r\n\r\n  async getAllTasks(newTask) {\r\n    const { orderByField, direction } = this.state.taskOrder;\r\n    const res = await fetch(\r\n      `/allTasks/${orderByField}/${direction}/${newTask}`\r\n    );\r\n    try {\r\n      const data = await res.json();\r\n      this.setState({\r\n        isFetched: true,\r\n        tasks: data,\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        error,\r\n        isFetched: true,\r\n      });\r\n    }\r\n  }\r\n\r\n  handleTaskUpdate(e) {\r\n    const taskID = Number(e.target.parentNode.id);\r\n    const fieldToUpdate = e.target.name;\r\n    let updateValue;\r\n\r\n    if (fieldToUpdate === \"task_completed\") {\r\n      updateValue = e.target.checked;\r\n    } else if (fieldToUpdate === \"task_scheduled_dt\") {\r\n      if (e.target.value !== \"\") {\r\n        updateValue = e.target.value + \"T00:00:00.000Z\";\r\n      } else {\r\n        updateValue = null;\r\n      }\r\n    } else {\r\n      updateValue = e.target.value;\r\n    }\r\n\r\n    const updatedTaskState = this.state.tasks.map((task) => {\r\n      const updateTask = (task) => {\r\n        const taskCopy = JSON.parse(JSON.stringify(task));\r\n        taskCopy[fieldToUpdate] = updateValue;\r\n\r\n        return taskCopy;\r\n      };\r\n\r\n      if (task.task_id === taskID) {\r\n        return updateTask(task);\r\n      } else {\r\n        return task;\r\n      }\r\n    });\r\n\r\n    this.setState({ tasks: updatedTaskState });\r\n  }\r\n\r\n  putTaskUpdate(e) {\r\n    const taskID = Number(e.target.parentNode.id);\r\n    const fieldToUpdate = e.target.name;\r\n    let updateValue;\r\n\r\n    this.state.tasks.forEach((val) => {\r\n      if (val.task_id === taskID) updateValue = val[fieldToUpdate];\r\n    });\r\n\r\n    if (fieldToUpdate === \"task_title\" && updateValue === \"\") return;\r\n\r\n    if (fieldToUpdate === \"task_title\" || fieldToUpdate === \"task_desc\") {\r\n      updateValue = encodeUpdateValue(updateValue);\r\n    }\r\n\r\n    if (updateValue === \"\") updateValue = \"null\";\r\n\r\n    fetch(`/amendTask/${taskID}/${fieldToUpdate}/${updateValue}`, {\r\n      method: \"PUT\",\r\n    });\r\n  }\r\n\r\n  async deleteTask(taskID) {\r\n    const response = window.confirm(\r\n      \"Are you sure that you want to delete this task?\"\r\n    );\r\n\r\n    if (response) {\r\n      const res = await fetch(`/deleteTask/${taskID}`, {\r\n        method: \"DELETE\",\r\n      });\r\n      if (res.status === 200) {\r\n        this.getAllTasks(false);\r\n      } \r\n    }\r\n  }\r\n\r\n  handleNewTaskChange(e) {\r\n    const newTaskTitle = e.target.value;\r\n\r\n    this.setState({ newTaskTitle });\r\n  }\r\n\r\n  async postNewTask() {\r\n    const newTaskTitle = encodeUpdateValue(this.state.newTaskTitle);\r\n\r\n    if (newTaskTitle === \"\") return;\r\n\r\n    const res = await fetch(`/addTask/${newTaskTitle}`, {\r\n      method: \"POST\",\r\n    });\r\n\r\n    if (res.status === 200) {\r\n      this.setState({ newTaskTitle: \"\" });\r\n      this.getAllTasks(true);\r\n    }\r\n  }\r\n\r\n  sortTasks(selectValue) {\r\n    const { orderByField, direction } = selectValue;\r\n\r\n    const allNulls = this.state.tasks.every((val) => {\r\n      return val[orderByField] === null;\r\n    });\r\n\r\n    if (allNulls) return;\r\n\r\n    const reorderedTasks = this.state.tasks\r\n      .map((val) => {\r\n        return val;\r\n      })\r\n      .sort((a, b) => {\r\n        const firstVal = convertToNumber(a[orderByField]);\r\n        const secondVal = convertToNumber(b[orderByField]);\r\n\r\n        if (firstVal === null && secondVal === null) {\r\n          return (\r\n            convertToNumber(b.task_creation_dt) -\r\n            convertToNumber(a.task_creation_dt)\r\n          );\r\n        }\r\n\r\n        if (firstVal === null) {\r\n          return 1;\r\n        }\r\n\r\n        if (secondVal === null) {\r\n          return -1;\r\n        }\r\n\r\n        if (direction === \"Ascending\") {\r\n          return firstVal - secondVal;\r\n        }\r\n\r\n        if (direction === \"Descending\") {\r\n          return secondVal - firstVal;\r\n        }\r\n\r\n        return 0;\r\n      });\r\n\r\n    this.setState({\r\n      tasks: reorderedTasks,\r\n      taskOrder: {\r\n        orderByField,\r\n        direction,\r\n      },\r\n    });\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.getAllTasks(false);\r\n  }\r\n\r\n  render() {\r\n    const { error, isFetched } = this.state;\r\n    if (error) {\r\n      return (\r\n        <section>\r\n          <p>Sorry, something went wrong. Please try again.</p>\r\n        </section>\r\n      );\r\n    } else if (!isFetched) {\r\n      return (\r\n        <section>\r\n          <p>Your tasks are loading...</p>\r\n        </section>\r\n      );\r\n    } else {\r\n      const tasks = this.state.tasks.map((task) => {\r\n        return (\r\n          <Task\r\n            key={task.task_id}\r\n            task={task}\r\n            handleTaskUpdate={this.handleTaskUpdate}\r\n            putTaskUpdate={this.putTaskUpdate}\r\n            deleteTask={this.deleteTask}\r\n          />\r\n        );\r\n      });\r\n      return (\r\n        <section className=\"tasksContainer\">\r\n          <NewTaskForm\r\n            newTaskTitle={this.state.newTaskTitle}\r\n            handleNewTaskChange={this.handleNewTaskChange}\r\n            postNewTask={this.postNewTask}\r\n          />\r\n          {tasks.length > 0 ? <SortBy sortTasks={this.sortTasks} /> : null}\r\n          {tasks}\r\n        </section>\r\n      );\r\n    }\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./css/index.css\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}